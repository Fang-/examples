::  tic-tac-toe                     ::  short description
::
::::
  ::
/?  310                             ::  require hoon version 310 or below
::
::
::::  sivtyv-barnel                 ::  name(s) of author(s)
  ::
!:                                  ::  insert stack trace for this core
|%                                  ::  core with data structures
++  axle  $:  current=board         ::  app state: state of current game
            currentgame=game
          record=(list game)
          ==
++  board   ,[top=row middle=row bottom=row ~]          ::  grid of ++space
++  game    ,[win=?(%x %o %tie) acts=(list action)]     ::  result w/playByPlay
++  action  $:  ?(%top %middle %bottom)                 ::  record of 1 action
              ?(%left %center %right)
            ?(%x %o)
            ==
++  row     $:  leftcol=space  middlecol=space          ::  row of three spaces
             rightcol=space
          ~
          ==
++  space   $?(~ %x %o)                                 ::  state of gridspace
--
::
!:                                    ::  insert stack trace for this core
|%                                    ::  core with supporting methods
++  set-space                         ::  change state of space
  |=  $:  col=?(%left %center %right) ::  accept column, space
      new=space                       ::
      ==
::  the gate above produces another gate that accepts a row whose column we
::  want to change. you can think of this like currying.
  |=  a=row  ^-  row                  ::  cast result to ++row
  ?-  col                             ::  switch on column
    %left    a(leftcol new)           ::  change left-column of row
    %center  a(middlecol new)  
    %right   a(rightcol new)
  ==
++  change-in                         ::  change state of row
  |=  $:  roe=?(%top %middle %bottom) ::  accept which row to change
      change=$+(row row)              ::  and gate to change it with
      == 
  |=  a=board  ^-  board              ::  cast result to ++board
  ?-  roe                             ::  switch on row
    %top     a(top (change top.a))    ::  change top row of board
    %middle  a(middle (change middle.a))
    %bottom  a(bottom (change bottom.a))
  ==
++  is-x  |=(a=space `?`?=(%x a))     ::  test if a space contains x
++  is-o  |=(a=space `?`?=(%o a))
++  space-full                        ::  test if a space is occupied
  |=(a=space `?`?|(?=(%x a) ?=(%o a)))    
++  row-full                          ::  test if all spaces in row are filled  
  |=(a=(list space) (levy a space-full))
++  winning                           ::  test if x or o wins
|=  a=(list space)                    ::  accept list spaces
|((levy a is-x) (levy a is-o))        ::  test if a contains just x or just o
--
::
!:                                    ::  insert stack trace for this core
|_  [hid=hide vat=axle]               ::  system data & app state data struct  
++  prep  ,_`.                        ::  wipe state when app code is changed
::
++  spam                              ::  send updates to subscribers
  |=  [ost=bone trn=?(%x %o)]
  :_  +>.$                            ::  return new app state
  :-  [ost %give %nice ~]             ::  positive acknowledgement
  %+  turn  (~(tap by sup.hid))       ::  map over subscribers
  |=  [ost=bone *]                    ::  send each of them 
  :^  ost  %give  %rush               ::  move containing updates
  :-  %json                           ::  mark of %json
  =+  brd=(board-to-json current.vat)
  (jobe board/brd turn/s/trn ~)       ::  convert board to ++json
::
++  peer                              ::  get 1st time subs. add them to sup
  |=  [ost=bone you=ship pax=path]    ::  path and ship of subscriber
  =+  brd=(board-to-json current.vat) ::  push on ++json copy of current board
  =+  trn=?~((mod (lent acts.currentgame.vat) 2) %x %o)  ::  whose turn it is
  :_  +>.$                            ::  return unaltered app state
  [ost %give %rush %json (jobe board/brd turn/s/trn ~)]~ ::  send board state
::
++  board-to-json                     ::  convert board to ++json            
  =+  sp=|=(a=space ?~(a ~ [%s a]))   ::  converter from ++space to ++json
  =+  ^=  ro                          ::  converter from ++row to ++json array
      |=  r=row
      :~  %a  (sp &1.r)  (sp &2.r)
      (sp &3.r)
      ==
  |=  b=board                         ::  accept board
  ^-  json                            ::  cast result to ++json
  :~  %a  (ro top.b)  (ro middle.b)   ::  produce ++json representation of board
  (ro bottom.b)
  ==
::
++  check-board                       ::  check for win or draw
  |=  cur=board                       ::  accept board
  ^-  ?(%win %tie %continue)          ::  cast to win, tie, or unfinished game 
  ?:  ?|                              ::  test if any row has 3 in a row
        (winning top.cur)              
        (winning middle.cur)
        (winning bottom.cur)
      ::
        %-  winning                   ::  test col for 3 in row
        (turn `(list row)`cur |=(a=row leftcol.a))
        %-  winning 
        (turn `(list row)`cur |=(a=row middlecol.a))
        %-  winning
        (turn `(list row)`cur |=(a=row rightcol.a))
      ==
    %win                              ::  produce win
  ?:  ?|                              ::  test diagonal
        %-  winning  :~
          leftcol.top.cur 
            middlecol.middle.cur 
              rightcol.bottom.cur
        ==
      ::
        %-  winning  :~  
              rightcol.top.cur
            middlecol.middle.cur
          leftcol.bottom.cur
        ==
      ==
    %win
  ?:  ?&  (row-full top.cur)          ::  check if board is full
          (row-full middle.cur)
          (row-full bottom.cur)
      ==
    %tie                              ::  produce tie
  %continue                           ::  game is still in progress

++  poke-json                         ::  receive JSON
  |=  [ost=bone you=ship newmove=json]

::  reparse ++json representation of incoming move to a tuple of row, column,
::  and space type. give result a face of "mve".
  =+  ^-  mve=(unit ,[roe=@t col=@t spa=@t])
      ((ot row/so col/so space/so ~):jo newmove)
  ~&  [vat newmove]                   ::  printf of state and latest move

::  154-157 assert that the json has sucessfully parsed and that
::  all of its fields have valid values. if we did not do this, the strict
::  type system would not allow us to pass this to functions which only
::  handle inputs of a certain type.
  ?>  ?=(^ mve)                       ::  assert move is cell (and thus parsed)
  ?>  ?=(?(%top %middle %bottom) roe.u.mve)             ::  assert row is valid
  ?>  ?=(?(%left %center %right) col.u.mve)
  ?>  ?=(?(%x %o) spa.u.mve)          ::  assert space is either x or o

  =:    current.vat                   ::  update board state
      %.  current.vat
      %+  change-in  roe.u.mve
      (set-space col.u.mve spa.u.mve)
        acts.currentgame.vat         
      [u.mve acts.currentgame.vat]  
    ==
  =+  ^-  rez=(unit ?(%tie %x %o))    ::  push on result of match
    ?-  (check-board current.vat)     ::  switch on product of checkboard
      %continue  ~                    ::  continue with game
      %win  [~ spa.u.mve]             ::  produce winner
      %tie  [~ %tie]                  ::  produce tie
    ==
  =+  trn=?~((mod (lent acts.currentgame.vat) 2) %x %o) ::  whose turn it is
  ?~  rez                             ::  if continue:
    (spam ost trn)                    ::  send postive ack and play on
  ~&  victory/u.rez                   ::  printf of victor
  =.  win.currentgame.vat  u.rez
  =.  record.vat                      ::  record history of game
    [currentgame.vat record.vat]
  =:  currentgame.vat  *game          ::  reset the current game and board
      current.vat      *board
  ==
  (spam ost %x)                      ::  send new state (a blank board)
  --


