::    (e)mail app, be sure to checkout the fully commented version!
::
::::  /hook/core/mail/app  
  :: 
  ::   
/?    314                                               ::  need v314 or below
/-    prompt, mail                                      ::  load marks
!:                                                      ::  enable trace hints  
::::  ~sivtyv-barnel
  ::
|%                                                      ::  cor w/types defined
++  sign                                                
  $:  %g
  $%  [%nice ~]                                         ::  positive ack
      [%rush %txt p=cord]                               ::  subscription data
  ==  ==
++  axle  ,[%0 p=wain q=ship r=@tI]                     ::  state type
++  move  ,[bone (mold note gift)]
++  note  $%  $:  %g                                    
          $%  [%show p=hapt q=ship r=path]              ::  subscription request
              [%mess p=hapt q=ship r=cage]              ::  typed message
          ==  ==
              $:  %d
              [%flog %text p=tape]                      ::  stderr output
          ==  ==
++  hapt  ,[ship path]                                  ::  app instance
++  gift  $%  [%nice ~]                                 
              [%rush %prompt p=prompt]                              
          ==
--
!:
|_  [hid=hide vat=axle]
++  poke-mail-args                                      ::  poked from C.Line
  |=  [ost=bone you=ship [arg=ship ~]]
  ^-  [(list move) _+>]
  =.  q.vat  arg
  :_  +>.$
  :-  ^-  move
      :^  ost  %pass  /in
      :+  %g   %show         
      :-  [our.hid +.imp.hid]
      [you /in/[-.imp.hid]]  
  `(list move)`(spam 'Subject: ' %text '')

++  spam
  |=  pom=prompt
  ^-  (list move)
  %+  turn  (~(tap by sup.hid))
    |=  [ost=bone *]
    ^-  move
    :^  ost  %give  %rush
    :-  %prompt
    pom

++  poke-mail                                           ::  receive `mail`s
  |*  [ost=bone him=ship msg=*]
  ~!  +<
  =>  .(+< `[ost=bone him=ship msg=mail]`+<)
  ~&  "hi"
  ^-  [(list move) _+>]
  :_  +>.$
  %+  welp  
    %+  turn  (flop (lore body.msg))
    |=(a=cord `move`[ost (dillify [' ' (trip a)])])     
  ^-  (list move)
  :~  [ost (dillify ?~(body.msg "No body." "Body:"))]   ::  executed backwards
      [ost (dillify "From: {<him>}")]
      [ost (dillify "Subject: {(trip sub.msg)}")]
      [ost %give %nice ~]
  ==

++  dillify
  |=(a=trip [%pass /di %d %flog %text a])

++  peer                                                ::  receive subscript
  |=  *
  [~ +>]

++  pour                                                ::  handle sbscr data
  |=  [ost=bone pax=path sih=*]
  =>  .(sih ;;(sign sih))
  ^-  [(list move) _+>]
  ?-  &2.sih                                            ::  2nd item of list
    %nice  
      :_  +>.$
      [ost %give +.sih]~                                ::  tail [%g %nice ~]
    %rush
      :-  (spam ?~(p.vat 'Body: ' '> ') %text '')  
      =.  p.vat
        [p.sih p.vat]
      +>.$
  ==

++  export                                              ::  list lines->atom
  =+  wan=(flop p.vat)
  ?~  wan  [~ ~]
  `mail`[i.wan (role t.wan)]

++  part                                                ::  called when killed
  |=  ost=bone
  =+  to=q.vat
  ~&  [%part ost]
  :_  ~                                                 ::  send `mail` msg
  [ost %pass /rec/to %g %mess [q.vat /[app.hid]] our.hid [%mail !>(export)]]
--
