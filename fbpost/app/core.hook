::  fbpost
::
::::  /hook/core/fbpost/app/
  ::
/?  314
!:
::::  ~sivtyv-barnels
  ::
|%
  ++  sign
    $:  %e
    $%  [%thou p=httr]
        [%nice ~]
    ==  ==
  ++  note
    $:  %e
    $%  [%them p=(unit hiss)]
    ==  ==
  ++  gift
    $%  [%nice ~]
    ==
  ++  app-id  'FILLMEIN'<-----------------------------------------
  ++  redirect-uri  'http://localhost:port/gen/main/pub/fab/fbpost'
  ++  app-secret  'FILLMEIN'<--------------------------------------
  ++  move  ,[bone (mold note gift)]
--
!:
|_  [hid=hide vat=[identity=(unit ,[id=@t first=@t last=@t]) key=(unit ,@t) photo=(unit ,@t)]]
::
++  peek
  |=  [client=ship pax=path]
  ~&  %peeked
  :-  %json
  ?~  identity.vat
    `json`~
  =+  `[id=@t first=@t last=@t]`u.identity.vat
  ?~  photo.vat
    `json`~
  =+  photo=u.photo.vat
  ^-  json
  %-  jobe  :~
    id/[%s id]
    first/[%s first]
    last/[%s last]
    photo/[%s photo]
  ==
::
++  hisser
  |=  [ost=bone move-data=wire endpoint=path args=quay]
  ^-  move
  =+  ^=  prl
      :+  hrt=[security=%.y port=~ host=[%.y path=/com/facebook/graph]]
        prk=[extension=~ path=endpoint]
      quy=args
  :^  ost  %pass
    move-data
  :^  %e  %them  ~  
  ^-  hiss
  [[prl] `moth`[%get ~ ~]]
  
::
  ++  poke-json
    |=  [ost=bone his=ship jon=json]
    ^+  [*(list move) +>]
    =+  ^=  queries
        :~  ['client_id' app-id]
            ['redirect_uri' redirect-uri]
            ['client_secret' app-secret]
            ?>  ?=(%s -.jon)
            ['code' p.jon]
        ==
    =+  ^=  hiz
        (hisser ost /code /oauth/'access_token' queries)
    :_  +>.$  
    :-  [ost %give %nice ~]
    [hiz]~
::
  ++  parse
    |=  a=httr
    ^-  $%([%json p=json] [%quay p=quay])
    =+  ctype=(~(got by (mo q.a)) 'Content-Type')                     ::  pull out non-unit
    =+  mit=`mite`(rash ctype ;~(sfix (more fas sym) (star next)))
    =+  body=`@t`q:(need r.a)                        :: unix puts on q to http request
    ?+    mit  ~|(unexpected/mit !!)
      [%application %json ~]  [%json (rash body apex:poja)]           ::  success
      [%text %plain ~]        [%quay (rash body yquy:epur)]           ::  error messages
    ==
  ++  pour
    |=  [ost=bone pax=path sih=sign] 
    ^+  [*(list move) +>]
    ?.  ?=(%thou +<.sih)
      :-(~ +>)
    ?+    pax  ~|(lost-path/pax !!)
        [%code ~]
      =+  paz=(parse p.sih)
      ?+    -.paz  ~&('already authorized' `+>.$)
        %quay
          ~!  paz
          =+  parsedbody=(~(got by (mo p.paz)) 'access_token')
          =.  key.vat  [~ parsedbody]
          =+      ^-  queries=quay
                  :~  ['input_token' parsedbody]
                      ['access_token' (crip "{(trip app-id)}|{(trip app-secret)}")]
                  ==
          :_(+>.$ [(hisser ost /tokenver /'debug_token' queries)]~)
      ==
        [%tokenver ~]
      ~&  token/-:(parse p.sih)
      =+  ^=  queries1
          ['access_token' (need key.vat)]~
      =+  ^=  queries2
          :~  ['access_token' (need key.vat)]
              [%redirect 'false']
              [%width '200']
          ==
      :_  +>.$ 
      :~  (hisser ost /me /me queries1) 
          (hisser ost /me/picture /me/picture queries2)
      ==
        [%me ~]
      ~&  [hi/-]:(parse p.sih)
      =+  parsedidentity=(parse p.sih)
      ?>  ?=(%json -.parsedidentity)  ::  can't do JSON operations until we verify it's a JSON
      =+  state=((ot id/so 'first_name'^so 'last_name'^so ~):jo p.parsedidentity)
      =.  identity.vat  state
      ~&  vat
      =+  name=((ot name/sa ~):jo p.parsedidentity)
      ~&  (need name)
      :_(+>.$ ~)
        [%me %picture ~]
      =+  =>  paz=(parse p.sih)
          ?>  ?=(%json -.paz)
          photojson=p.paz
      =+  reparser=(ot data/(ot url/so ~) ~):jo
      =.  photo.vat  
        (reparser photojson)
      `+>.$
    ==
  --
