::
::
::::
  ::
/?  310
::
::
::::  sivtyv-barnel
  ::
|%                                    ::  core with data structures
++  axle  (list result)               ::  results of all past games
++  result  ,[bcons=@t bscore=@ud ycons=@t yscore=@ud]
--
!:

::  main core containing our app. it has a "sample" that contains our state.
::  hid contains our system data. vat contains our app-specific state.
::  cores with sample are also called "doors".
|_  [hid=hide vat=axle]               ::  system data, state

::  poke-json is called whenever the app receives any data from %gall with the
::  type ("mark") of json. as a rule, it accepts a bone, a ship of the ship
::  that poked you, as well as an element of the type of data that poked you,
::  which is in this case ++json
++  poke-json                         ::  receive JSON
  |=  [ost=bone you=ship args=json]
  ?.  =(/[app.hid] imp.hid)           ::  send data to parent app
    =+  cag=`cage`[%json !>(args)]    ::  XX will change
    ::  XX explain system call
    :_(+>.$ [ost %pass /from-child %g %mess [our.hid /[app.hid]] you cag]~)
  =+  ^-  parsedresult=result         ::  push on result of reparsing JSON
      ~|  bad-json/args               ::  produce p if q crashes
      %-  need                        ::  crash if ~ (on parse-fail)
      %-  =>  jo                      ::  from ++jo get "ot", obj-tuple parser
      ::  XX explain reparsing  
      (ot bcons/so bscore/ni ycons/so yscore/ni ~)
      args                            ::  on "args"
  =.  vat  [parsedresult vat]
  :: ~&  rez
  [[ost %give %nice ~]~ +>.$]
::
++  result-to-json
  |=  result
  %-  jobe  :~
    bcons/[%s bcons]
    ycons/[%s ycons]
    bscore/(jone bscore)              ::  jone converts @u to json number
    yscore/(jone yscore)
  ==
++  peek
  |=  [his=ship pax=path]
  [%json `json`[%a (turn vat result-to-json)]]
  ::  don't forget to send %json in front
--
